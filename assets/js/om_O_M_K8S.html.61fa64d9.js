"use strict";(self.webpackChunkx_blog=self.webpackChunkx_blog||[]).push([[4989],{6262:(e,a)=>{a.A=(e,a)=>{const r=e.__vccOpts||e;for(const[e,t]of a)r[e]=t;return r}},7093:(e,a,r)=>{r.r(a),r.d(a,{comp:()=>p,data:()=>l});var t=r(641);const s=r.p+"assets/img/k8s01.259e1449.jpg",i=r.p+"assets/img/k8s02.0f50321b.jpg",n={},p=(0,r(6262).A)(n,[["render",function(e,a){return(0,t.uX)(),(0,t.CE)("div",null,a[0]||(a[0]=[(0,t.Fv)('<h2 id="_1-kubernetes使用场景" tabindex="-1"><a class="header-anchor" href="#_1-kubernetes使用场景"><span>1.kubernetes使用场景？</span></a></h2><ul><li>自动化的运维平台，中小企业可以使用k8s构建一套自动化运维平台</li><li>充分利用服务器的资源，容器化的方式</li><li>服务无缝迁移，通过容器化的方式，镜像<br> 及k8s是管理容器的</li></ul><h2 id="_2-服务部署模式变迁以及服务部署模式是如何变迁的" tabindex="-1"><a class="header-anchor" href="#_2-服务部署模式变迁以及服务部署模式是如何变迁的"><span>2.服务部署模式变迁以及服务部署模式是如何变迁的？</span></a></h2><ul><li>物理机部署（直接把服务部署到物理机上，会浪费物理机资源）</li><li>虚拟化（虚拟机）方式（把服务部署到虚拟机上，虚拟机分割物理资源，以达到充分利用服务器资源，但虚拟机本身就比较消耗资源）</li><li>容器化的方式部署</li></ul><h2 id="服务部署模式变化-带来哪些问题" tabindex="-1"><a class="header-anchor" href="#服务部署模式变化-带来哪些问题"><span>服务部署模式变化，带来哪些问题？</span></a></h2><p>SOA架构，微服务架构模式下，服务拆分的越来越多，部署维护的服务越来越多。</p><h2 id="如何去管理服务" tabindex="-1"><a class="header-anchor" href="#如何去管理服务"><span>如何去管理服务？</span></a></h2><p>虚拟机方式（使用openstack）<br> 容器（k8s，管理容器）</p><h2 id="以下问题k8s都可以轻松搞定" tabindex="-1"><a class="header-anchor" href="#以下问题k8s都可以轻松搞定"><span>以下问题k8s都可以轻松搞定</span></a></h2><p>面临些什么问题？<br> 服务如何横向扩展？<br> 容器宕机怎么办？数据怎么恢复？<br> 重新发布新的版本如何更新，更新后不影响业务？服务迁移，滚动更新<br> 如何监控容器？<br> 容器如何调度创建？<br> 数据的安全性如何保证？</p><h2 id="云架构-和-云原生" tabindex="-1"><a class="header-anchor" href="#云架构-和-云原生"><span>云架构 和 云原生 ？</span></a></h2><h3 id="云和k8s是什么关系" tabindex="-1"><a class="header-anchor" href="#云和k8s是什么关系"><span>云和k8s是什么关系</span></a></h3><pre><code>云就是使用容器构建的一套服务集群网络\nk8s用来管理云中的容器\n</code></pre><h3 id="云架构" tabindex="-1"><a class="header-anchor" href="#云架构"><span>云架构</span></a></h3><ul><li>iaas 基础设施即服务<br> 用户：租用云主机，用户就不需要考虑网络，DNS，存储，硬件环境等相关问题<br> 运营商：提供网络，存储，DNS，基础设施服务</li><li>paas 平台及服务<br> mysql，es，mq 等服务都提供了</li><li>saas 软件服务<br> 钉钉，财务管理软件</li><li>serverless<br> 无服务，不需要服务器<br> 站在用户的角度考虑的，用户使用的云服务器即可</li></ul><h3 id="云原生" tabindex="-1"><a class="header-anchor" href="#云原生"><span>云原生</span></a></h3><p>就是为了让应用程序（项目，服务软件）都运行在云上的解决方案，这样的方案叫云原生。<br> 特点：<br> * 容器化 --- 所有服务部署在容器中<br> * 微服务 --- 微服务架构<br> * CI/CD --- 可持续交互和可持续部署<br> * devOPS --- 开发和运维密不可分</p><h2 id="kuberbetes架构" tabindex="-1"><a class="header-anchor" href="#kuberbetes架构"><span>kuberbetes架构</span></a></h2><p>google使用go语音开发的。</p><h3 id="master节点" tabindex="-1"><a class="header-anchor" href="#master节点"><span>master节点</span></a></h3><ul><li>API server k8s的网关，所有的指令请求都要经过 api server</li><li>scheduler 调度器，使用调度算法，将请求资源调度某一个node节点上</li><li>controller 控制器，维护k8s资源对象（CRUD）</li><li>etcd 存储资源对象</li></ul><h3 id="node节点" tabindex="-1"><a class="header-anchor" href="#node节点"><span>node节点</span></a></h3><ul><li>docker 容器引擎，运营容器的基础环境</li><li>kubelet 在每个node节点都存在一份，在node节点上的资源操作指令由kubelet执行</li><li>kube -proxy 代理服务，作用是负载均衡，在多个pod之间负载</li><li>fiuent 日志收集服务</li><li>pod 是k8s管理的基本单元（最小单元），pod内部是容器，k8s不直接管理容器，而是管理pod<br> master与node关系是 一个master对应一群node节点</li></ul><h2 id="pod核心原理" tabindex="-1"><a class="header-anchor" href="#pod核心原理"><span>pod核心原理</span></a></h2><p>pod是什么？可以认为是容器（这个容器中装的是docker创建的容器，pod是装容器的容器），pod是一个虚拟化的分组（有自己的ip地址，主机名），相当于一台独立的沙箱环境。pod相当于独立主机，可以封装一个或者多个容器。一套服务的所有容器，nginx，mysql，web服务等，再加上一个pause容器，作用是共享网络和共享存储</p><h2 id="replicaset副本控制器" tabindex="-1"><a class="header-anchor" href="#replicaset副本控制器"><span>replicaSet副本控制器</span></a></h2><ul><li>replicaSet和replicationController 都是副本控制器</li><li>副本控制器的作用是控制pod的数量，设置了数量，那么k8s会始终保持pod的数量与设置的一致，如果其中一个pod挂了，会马上创建一个。</li><li>它们两个的区别是replicaSet可以单选或者多选，replicationController只能单选。通过标签选择器来实现选择相关pod。</li></ul><h2 id="deployment-部署对象" tabindex="-1"><a class="header-anchor" href="#deployment-部署对象"><span>deployment 部署对象</span></a></h2><p>服务部署结构模型<br> 滚动更新<br> deployment和replicaSet一起使用，版本更新会创建一个新的replicaSet，从而新建pod<br><img src="'+s+'" alt="部署模型" loading="lazy"></p><h2 id="statefulset-部署有状态服务" tabindex="-1"><a class="header-anchor" href="#statefulset-部署有状态服务"><span>statefulset 部署有状态服务</span></a></h2><p>部署模型<br> 有状态服务<br> 状态服务的解释：<br><img src="'+i+'" alt="状态服务" loading="lazy"><br> 模型与deployment类似，statefulset保证pod重新建立之后，hostname不会发生变化，pod就可以通过hostname来关联的数据</p><h2 id="pod访问流程" tabindex="-1"><a class="header-anchor" href="#pod访问流程"><span>pod访问流程</span></a></h2><p>pod是一个容器，里面装的是容器，对外提供访问，首先要对物理机进行访问 ip+端口，通过转发的方式映射到pod上</p><h2 id="多个pod副本如何实现负载均衡" tabindex="-1"><a class="header-anchor" href="#多个pod副本如何实现负载均衡"><span>多个pod副本如何实现负载均衡？</span></a></h2><p>使用新的组件 service来实现负载均衡</p><h3 id="什么是service" tabindex="-1"><a class="header-anchor" href="#什么是service"><span>什么是service？</span></a></h3><ul><li>pod IP pod的ip地址</li><li>node IP 物理机的ip地址</li><li>cluster IP 是由k8s抽象出的service对象，这个对象就是一个vip（虚拟ip）的资源对象，是一个进程-资源对象</li><li>使用虚拟ip service来进行负载均衡</li></ul><h3 id="service-和pod-是如何关联的呢" tabindex="-1"><a class="header-anchor" href="#service-和pod-是如何关联的呢"><span>service 和pod 是如何关联的呢？</span></a></h3><p>利用的是标签选择器</p>',39)]))}]]),l=JSON.parse('{"path":"/om/O_M/K8S.html","title":"kubernetes(K8S)","lang":"zh-CN","frontmatter":{"icon":"box","date":"2020-05-04T00:00:00.000Z","category":["K8S","kubernetes"],"tag":["K8S","kubernetes","笔记","记录"],"title":"kubernetes(K8S)","star":true,"pageview":true,"description":"1.kubernetes使用场景？ 自动化的运维平台，中小企业可以使用k8s构建一套自动化运维平台 充分利用服务器的资源，容器化的方式 服务无缝迁移，通过容器化的方式，镜像 及k8s是管理容器的 2.服务部署模式变迁以及服务部署模式是如何变迁的？ 物理机部署（直接把服务部署到物理机上，会浪费物理机资源） 虚拟化（虚拟机）方式（把服务部署到虚拟机上，虚拟...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kubernetes(K8S)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-14T07:00:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XK\\",\\"url\\":\\"https://xk1009.github.io/Xblog\\",\\"email\\":\\"564293991@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Xblog/om/O_M/K8S.html"}],["meta",{"property":"og:site_name","content":"树下打盹儿"}],["meta",{"property":"og:title","content":"kubernetes(K8S)"}],["meta",{"property":"og:description","content":"1.kubernetes使用场景？ 自动化的运维平台，中小企业可以使用k8s构建一套自动化运维平台 充分利用服务器的资源，容器化的方式 服务无缝迁移，通过容器化的方式，镜像 及k8s是管理容器的 2.服务部署模式变迁以及服务部署模式是如何变迁的？ 物理机部署（直接把服务部署到物理机上，会浪费物理机资源） 虚拟化（虚拟机）方式（把服务部署到虚拟机上，虚拟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T07:00:52.000Z"}],["meta",{"property":"article:tag","content":"记录"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"K8S"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T07:00:52.000Z"}]]},"git":{"createdTime":1751269860000,"updatedTime":1752476452000,"contributors":[{"name":"xk","username":"xk","email":"564293991@qq.com","commits":2,"url":"https://github.com/xk"}]},"readingTime":{"minutes":4.38,"words":1314},"filePathRelative":"om/O&M/K8S.md","excerpt":"<h2>1.kubernetes使用场景？</h2>\\n<ul>\\n<li>自动化的运维平台，中小企业可以使用k8s构建一套自动化运维平台</li>\\n<li>充分利用服务器的资源，容器化的方式</li>\\n<li>服务无缝迁移，通过容器化的方式，镜像<br>\\n及k8s是管理容器的</li>\\n</ul>\\n<h2>2.服务部署模式变迁以及服务部署模式是如何变迁的？</h2>\\n<ul>\\n<li>物理机部署（直接把服务部署到物理机上，会浪费物理机资源）</li>\\n<li>虚拟化（虚拟机）方式（把服务部署到虚拟机上，虚拟机分割物理资源，以达到充分利用服务器资源，但虚拟机本身就比较消耗资源）</li>\\n<li>容器化的方式部署</li>\\n</ul>","autoDesc":true}')}}]);