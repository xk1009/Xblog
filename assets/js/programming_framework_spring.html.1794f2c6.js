"use strict";(self.webpackChunkx_blog=self.webpackChunkx_blog||[]).push([[230],{6262:(e,t)=>{t.A=(e,t)=>{const r=e.__vccOpts||e;for(const[e,a]of t)r[e]=a;return r}},9961:(e,t,r)=>{r.r(t),r.d(t,{comp:()=>o,data:()=>i});var a=r(641);const n={},o=(0,r(6262).A)(n,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,t[0]||(t[0]=[(0,a.Fv)('<h2 id="spring-创建bean的三种方式" tabindex="-1"><a class="header-anchor" href="#spring-创建bean的三种方式"><span>spring 创建bean的三种方式</span></a></h2><ol><li>使用默认构造函数 xml中配置bean id 和class</li><li>使用普通工厂（类）中的方法来创建对象并存入spring容器<br> xml中 配置factory-bean 和factory-method</li><li>使用静态工厂（类）中的静态方法创建对象并存入容器<br> xml中 使用factory-method指定静态方法</li></ol><h2 id="bean的作用范围" tabindex="-1"><a class="header-anchor" href="#bean的作用范围"><span>bean的作用范围</span></a></h2><p>scope属性：<br> singleton 单利 （默认）<br> prototype 多利<br> request 作用于web应用的请求范围<br> session 作用于web应用的会话范围<br> global-session 作用于集群环境会话范围（全集会话范围），<br> 当不上集群环境时，就是session</p><h2 id="bean的生命周期" tabindex="-1"><a class="header-anchor" href="#bean的生命周期"><span>bean的生命周期</span></a></h2><ul><li>单利 spring加载创建容器 初始化 容器一直在一直活着 容器销毁对象销毁</li><li>多利 使用时创建初始化 使用过程中一直活着 当对象长时间不用 由gc回收</li></ul><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解"><span>常用注解：</span></a></h2><ul><li>@bean 注解 将方法的返回值作为javabean 存入spring容器 默认方法名为key，通过name属性指定key</li><li>@Import 在主配置类中导入其他配置类</li><li>@PropretiesSource 读取配置文件</li></ul><h2 id="spring事务传播行为" tabindex="-1"><a class="header-anchor" href="#spring事务传播行为"><span>spring事务传播行为</span></a></h2><p>说明：方法1调用方法2 两个方法都是有事务的 在1掉2中 方法2的事务是属于方法1 的 还是从新开启一个事务呢？这个是由于2的事务传播行为决定的<br> 七种传播行为:<br> 1.PROPAGATION_REQUIRED 如果当前没有事务就创建一个事务，当前有事务就加入事务，spring默认的 常用<br> 2.PROPAGATION_SUPPORTS 支持当前事务，如果当前有事务就加入当前事务，如果没有事务就非事务执行 常用<br> 3.PROPAGATION_MANDATORY 支持当前事务，如果当前存在事务，就加入事务，如果当前不存在事务，就抛出异常<br> 4.PROPAGATION_REQUIRES+_NEW创建新事务，无论当前存不存在事务，都创建新事务<br> 。。。</p>',10)]))}]]),i=JSON.parse('{"path":"/programming/framework/spring.html","title":"spring","lang":"zh-CN","frontmatter":{"icon":"tree","category":["java","foundation","基础","spring"],"tag":["java","foundation","笔记","记录","基础","spring"],"title":"spring","star":true,"pageview":true,"description":"spring 创建bean的三种方式 使用默认构造函数 xml中配置bean id 和class 使用普通工厂（类）中的方法来创建对象并存入spring容器 xml中 配置factory-bean 和factory-method 使用静态工厂（类）中的静态方法创建对象并存入容器 xml中 使用factory-method指定静态方法 bean的作用范围...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"spring\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T07:00:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XK\\",\\"url\\":\\"https://xk1009.github.io/Xblog\\",\\"email\\":\\"564293991@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Xblog/programming/framework/spring.html"}],["meta",{"property":"og:site_name","content":"树下打盹儿"}],["meta",{"property":"og:title","content":"spring"}],["meta",{"property":"og:description","content":"spring 创建bean的三种方式 使用默认构造函数 xml中配置bean id 和class 使用普通工厂（类）中的方法来创建对象并存入spring容器 xml中 配置factory-bean 和factory-method 使用静态工厂（类）中的静态方法创建对象并存入容器 xml中 使用factory-method指定静态方法 bean的作用范围..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T07:00:52.000Z"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:tag","content":"记录"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"foundation"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2025-07-14T07:00:52.000Z"}]]},"git":{"createdTime":1751357519000,"updatedTime":1752476452000,"contributors":[{"name":"xk","username":"xk","email":"564293991@qq.com","commits":3,"url":"https://github.com/xk"}]},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"programming/framework/spring.md","excerpt":"<h2>spring 创建bean的三种方式</h2>\\n<ol>\\n<li>使用默认构造函数 xml中配置bean id 和class</li>\\n<li>使用普通工厂（类）中的方法来创建对象并存入spring容器<br>\\nxml中 配置factory-bean 和factory-method</li>\\n<li>使用静态工厂（类）中的静态方法创建对象并存入容器<br>\\nxml中 使用factory-method指定静态方法</li>\\n</ol>\\n<h2>bean的作用范围</h2>\\n<p>scope属性：<br>\\nsingleton 单利 （默认）<br>\\nprototype 多利<br>\\nrequest 作用于web应用的请求范围<br>\\nsession 作用于web应用的会话范围<br>\\nglobal-session 作用于集群环境会话范围（全集会话范围），<br>\\n当不上集群环境时，就是session</p>","autoDesc":true}')}}]);