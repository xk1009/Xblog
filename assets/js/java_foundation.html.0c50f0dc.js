"use strict";(self.webpackChunkx_blog=self.webpackChunkx_blog||[]).push([[6742],{4348:(e,i,l)=>{l.r(i),l.d(i,{comp:()=>r,data:()=>n});var t=l(641);const a={},r=(0,l(6262).A)(a,[["render",function(e,i){return(0,t.uX)(),(0,t.CE)("div",null,i[0]||(i[0]=[(0,t.Fv)('<h2 id="面向对象特征-封装-继承-多态-抽象" tabindex="-1"><a class="header-anchor" href="#面向对象特征-封装-继承-多态-抽象"><span>面向对象特征(封装，继承，多态，抽象)</span></a></h2><ol><li><p>封装：<br> 将对象封装成一个相对封闭和高度自治的个体，通过自己的方法来获取或改变其属性值。</p></li><li><p>继承：<br> 继承父类的所有属性和方法，作为自己的内容，同时加入若干自己的新的内容，或修改原来的方法使之更适合特殊的需要。</p></li><li><p>多态：<br> 是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定</p></li><li><p>抽象：<br> 将一些事物的相识和共同之处，将事物归为一个类，这个类只考虑这些事物的相识和共性之处</p></li></ol><h2 id="string-stringbuffer-stringbuilder" tabindex="-1"><a class="header-anchor" href="#string-stringbuffer-stringbuilder"><span>string，stringbuffer，stringbuilder</span></a></h2><ul><li>string底层使用了final char[] 字符数组，所以其内容是不可变的</li><li>stringbuffer是线程安全的，stringbuilder线程不安全</li><li>字符串拼接使用stringbuffer或者stringbuilder，builder相对于buffer效率高</li></ul><h2 id="java集合" tabindex="-1"><a class="header-anchor" href="#java集合"><span>java集合</span></a></h2><ul><li><p>set集合：<br> 不允许相同元素加入集合，若相同元素使用set的add方法将返回false，判断元素是否相同是通过equals方法判断的，只要equals返回true，set就不会添加</p></li><li><p>HashSet：</p><ol><li>不能保证顺序一致；</li><li>不是同步的；</li><li>集合元素可以是null，只能放入一个null<br> 判断元素是否相同是通过equals和hashCode方法同时相等</li></ol></li><li><p>LinkedHashSet：</p><ol><li>顺序可保证，通过hashcode决定位置，通过链表来维护元素的次序；</li><li>遍历时性能比hashSet好，添加时次于hashSet</li></ol></li><li><p>treeSet：</p><ol><li>可以确保元素的排序状态，支持自然排序和定制排序，自然排序为默认排序规则，</li><li>判断元素是否相等时通过equals和compareTo方法比较</li></ol></li><li><p>List集合：<br> 有序，可重复，因为其有索引，所以查询速度快，添加和删除时伴随着后面元素的移动，所以添加和删除相对较慢</p></li><li><p>ArrayList：<br> 基于数组实现，可以使用sort方法实现排序提供Comparator比较器即可，扩容为旧容量的一半，即50%</p></li><li><p>linkedList：<br> 基于链表实现，双向链表，每个节点维护了上一个和下一个值的指针</p></li><li><p>vector：<br> 线程安全的，扩容为100%</p></li><li><p>map集合（键值对，键唯一，值不唯一）</p></li></ul><ol><li>hashMap：线程不安全，可以用null作为k或v，数组+链表+红黑树，初始容量为16，扩容为旧容量的2倍</li><li>hashTable：线程安全，会锁住整个对象，null不能作为k或v</li><li>LinkedHashMap：有序</li><li>treeMap：基于红黑二叉树，有序</li><li>ConccurentHashMap：线程安全，null不能作为k或v，CAS+同步锁，数组+链表+红黑树</li></ol><ul><li>线程不安全的集合都可以使用 collections.synchronized()方法，使其线程安全<br> CopyOnWrite集合，可实现线程安全，其工作原理是先copy一个容器在其中添加或删除，完成之后再指向新的容器，这种使用于读多写少的情况</li></ul><h2 id="线程的实现方式" tabindex="-1"><a class="header-anchor" href="#线程的实现方式"><span>线程的实现方式</span></a></h2><ol><li>继承Thread类，并重写其run()方法。</li><li>实现Runnable接口，并实现其run()方法。</li><li>实现Callable接口，并实现其call()方法。</li></ol><h2 id="springmvc执行流程" tabindex="-1"><a class="header-anchor" href="#springmvc执行流程"><span>springMVC执行流程</span></a></h2><ol><li>用户发送请求至前端控制器DispatcherServlet。</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter处理器适配器。</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View.</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户。</li></ol><h2 id="与" tabindex="-1"><a class="header-anchor" href="#与"><span>++与--</span></a></h2><p>++在前是 先加再用<br> ++在后是 先用再加<br> --同理</p>',14)]))}]]),n=JSON.parse('{"path":"/java/foundation.html","title":"java基础","lang":"zh-CN","frontmatter":{"icon":"grip-lines","date":"2018-08-15T00:00:00.000Z","category":["java","foundation","基础"],"tag":["java","foundation","笔记","记录","基础"],"title":"java基础","star":true,"pageview":true,"description":"面向对象特征(封装，继承，多态，抽象) 封装： 将对象封装成一个相对封闭和高度自治的个体，通过自己的方法来获取或改变其属性值。 继承： 继承父类的所有属性和方法，作为自己的内容，同时加入若干自己的新的内容，或修改原来的方法使之更适合特殊的需要。 多态： 是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-24T07:44:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XK\\",\\"url\\":\\"https://xk1009.github.io/Xblog\\",\\"email\\":\\"564293991@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Xblog/java/foundation.html"}],["meta",{"property":"og:site_name","content":"树下打盹儿"}],["meta",{"property":"og:title","content":"java基础"}],["meta",{"property":"og:description","content":"面向对象特征(封装，继承，多态，抽象) 封装： 将对象封装成一个相对封闭和高度自治的个体，通过自己的方法来获取或改变其属性值。 继承： 继承父类的所有属性和方法，作为自己的内容，同时加入若干自己的新的内容，或修改原来的方法使之更适合特殊的需要。 多态： 是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-24T07:44:50.000Z"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:tag","content":"记录"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"foundation"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2018-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-24T07:44:50.000Z"}]]},"git":{"createdTime":1750743585000,"updatedTime":1750751090000,"contributors":[{"name":"xk","username":"xk","email":"564293991@qq.com","commits":2,"url":"https://github.com/xk"}]},"readingTime":{"minutes":3.76,"words":1127},"filePathRelative":"java/foundation.md","excerpt":"<h2>面向对象特征(封装，继承，多态，抽象)</h2>\\n<ol>\\n<li>\\n<p>封装：<br>\\n将对象封装成一个相对封闭和高度自治的个体，通过自己的方法来获取或改变其属性值。</p>\\n</li>\\n<li>\\n<p>继承：<br>\\n继承父类的所有属性和方法，作为自己的内容，同时加入若干自己的新的内容，或修改原来的方法使之更适合特殊的需要。</p>\\n</li>\\n<li>\\n<p>多态：<br>\\n是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定</p>\\n</li>\\n<li>\\n<p>抽象：<br>\\n将一些事物的相识和共同之处，将事物归为一个类，这个类只考虑这些事物的相识和共性之处</p>\\n</li>\\n</ol>","autoDesc":true}')},6262:(e,i)=>{i.A=(e,i)=>{const l=e.__vccOpts||e;for(const[e,t]of i)l[e]=t;return l}}}]);