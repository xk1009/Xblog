"use strict";(self.webpackChunkx_blog=self.webpackChunkx_blog||[]).push([[2879],{6262:(e,a)=>{a.A=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}},6578:(e,a,n)=>{n.r(a),n.d(a,{comp:()=>t,data:()=>l});var s=n(641);const i={},t=(0,n(6262).A)(i,[["render",function(e,a){return(0,s.uX)(),(0,s.CE)("div",null,a[0]||(a[0]=[(0,s.Fv)('<h2 id="vue-实现了变量与模型的双向绑定" tabindex="-1"><a class="header-anchor" href="#vue-实现了变量与模型的双向绑定"><span>vue 实现了变量与模型的双向绑定</span></a></h2><p>减少 dom 操作（虚拟 dom），提高渲染效率，双向数据绑定</p><h2 id="特点及优势" tabindex="-1"><a class="header-anchor" href="#特点及优势"><span>特点及优势</span></a></h2><ul><li>利用虚拟 DOM 渲染</li><li>轻量级</li><li>响应式组件</li><li>支持服务器渲染</li><li>易于集成路由工具，打包工具以及状态管理工具</li></ul><h2 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断"><span>条件判断</span></a></h2><p>v-if ：变量值为 true/false，支持表达式 大于小于等于，如果为 false，直接没有这条数据<br> v-show ：变量值为 true/false，支持表达式 大于小于等于，如果为 false，实际是隐藏数据<br> 反复使用 用 v-show，减少渲染性能更好，只使用一次 用 v-if</p><h2 id="方法绑定" tabindex="-1"><a class="header-anchor" href="#方法绑定"><span>方法绑定</span></a></h2><p>使用@click=‘方法名’ 实际上是 v-on:click<br> 方法写再 methods 中<br> object.freeze()方法解除绑定<br> 这会阻止修改现有属性，及相应系统无法再最终变化</p><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h2><p>v-for ： v-for=“item，index in list” ，item 循环后的变量值，index 索引值，list 被循环变量</p><h2 id="属性中绑定数据" tabindex="-1"><a class="header-anchor" href="#属性中绑定数据"><span>属性中绑定数据</span></a></h2><p>变量时使用冒号：来实现属性绑定 实际上是 v-bind：</p><h2 id="key-属性" tabindex="-1"><a class="header-anchor" href="#key-属性"><span>key 属性</span></a></h2><p>设置 key 属性是给 VUE 使用的，用来强调重置<br> 插入一次不再修改<br> 使用 v-once 属性<br> 添加 html 内容<br> 使用 v-html=&#39;变量名&#39; 使用这种方式会存在 xss 攻击 嵌入 script 标签等</p><h2 id="计算属性-computed" tabindex="-1"><a class="header-anchor" href="#计算属性-computed"><span>计算属性 computed</span></a></h2><p>会将结果进行缓存，只要条件内容变化就会重新计算</p><h2 id="侦听器-watch" tabindex="-1"><a class="header-anchor" href="#侦听器-watch"><span>侦听器 watch</span></a></h2><p>只要属性发生改变就会触发事件，使用过多会使性能下降</p><h2 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定"><span>事件绑定</span></a></h2><p>可以使用表达式的方式 @click=‘变量+=1’ 点击一次变量加一</p><h2 id="事件修饰符参考文档" tabindex="-1"><a class="header-anchor" href="#事件修饰符参考文档"><span>事件修饰符参考文档</span></a></h2><p>例如 .stop 修饰符 阻止冒泡事件<br> 修饰符可以组合使用 直接链式编程 ，.stop.trim</p><h2 id="vue-生命周期-8-个钩子函数可调用" tabindex="-1"><a class="header-anchor" href="#vue-生命周期-8-个钩子函数可调用"><span>VUE 生命周期 8 个钩子函数可调用</span></a></h2><ol><li>beforeCreate：此时数据 data 和事件方法还未绑定</li><li>create：数据和方法绑定到 vue 实例上</li><li>beforeMount：渲染（挂载）之前，根据数据生成的 DOM 对象无法拿到</li><li>mounted：渲染之后，可以拿到数据生成的 DOM 对象</li><li>beforeUpdate：更新之前</li><li>updated：更新之后</li><li>beforeDistrioy：销毁之前</li><li>distroyed：销毁之后</li></ol><h2 id="vue-组件" tabindex="-1"><a class="header-anchor" href="#vue-组件"><span>vue 组件</span></a></h2><div class="language-javascrpt line-numbers-mode" data-highlighter="shiki" data-ext="javascrpt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascrpt"><span class="line"><span>定义组件</span></span>\n<span class="line"><span>Vue.component(‘组件名称’，{</span></span>\n<span class="line"><span>template：，</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>//通过父元素Vue，传递数据或方法到组件中</span></span>\n<span class="line"><span>props：[&#39;来至父元素的变量名称或者方法名称&#39;]</span></span>\n<span class="line"><span>})</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>$emit(&#39;方法名&#39;，参数) 子组件可以触发父Vue的方法</span></span>\n<span class="line"><span>$parent.方法名 子元素调用父元素方法 同理可以拿到父元素的属性</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>$root 根组件</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>v-model</span></span>\n<span class="line"><span>&lt;slot&gt; 插槽标签</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>axios 安装<br> router 安装</p><p>LESS =》 css 编程语言<br> 模块化开发 ，虚拟 dom</p><p>computed 类似于内存缓存<br> 计算属性 计算出的结果保存到属性中 内存中运行</p><p>page 视图组件<br> com</p><h2 id="vue-打包安卓-apk-包" tabindex="-1"><a class="header-anchor" href="#vue-打包安卓-apk-包"><span>vue 打包安卓 apk 包</span></a></h2><p><a href="https://www.cnblogs.com/fanqiuzhuji/p/12696347.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/fanqiuzhuji/p/12696347.html</a></p><ol><li>调整线上环境先将项目 build</li><li>hbuilder 新建项目 h5+app</li><li>将 build 后的 dist 文件中内容复制到新项目中</li><li>配置 manifest.json 文件</li><li>发行 原生 app 云打包</li></ol>',33)]))}]]),l=JSON.parse('{"path":"/frontEnd/vue.html","title":"vue","lang":"zh-CN","frontmatter":{"icon":"v","category":["frontEnd","vue"],"tag":["frontEnd","vue","笔记","记录"],"title":"vue","star":true,"pageview":true,"description":"vue 实现了变量与模型的双向绑定 减少 dom 操作（虚拟 dom），提高渲染效率，双向数据绑定 特点及优势 利用虚拟 DOM 渲染 轻量级 响应式组件 支持服务器渲染 易于集成路由工具，打包工具以及状态管理工具 条件判断 v-if ：变量值为 true/false，支持表达式 大于小于等于，如果为 false，直接没有这条数据 v-show ：变量...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-10T08:45:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XK\\",\\"url\\":\\"https://xk1009.github.io/Xblog\\",\\"email\\":\\"564293991@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Xblog/frontEnd/vue.html"}],["meta",{"property":"og:site_name","content":"树下打盹儿"}],["meta",{"property":"og:title","content":"vue"}],["meta",{"property":"og:description","content":"vue 实现了变量与模型的双向绑定 减少 dom 操作（虚拟 dom），提高渲染效率，双向数据绑定 特点及优势 利用虚拟 DOM 渲染 轻量级 响应式组件 支持服务器渲染 易于集成路由工具，打包工具以及状态管理工具 条件判断 v-if ：变量值为 true/false，支持表达式 大于小于等于，如果为 false，直接没有这条数据 v-show ：变量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-10T08:45:02.000Z"}],["meta",{"property":"article:tag","content":"记录"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"frontEnd"}],["meta",{"property":"article:modified_time","content":"2025-07-10T08:45:02.000Z"}]]},"git":{"createdTime":1750339044000,"updatedTime":1752137102000,"contributors":[{"name":"xk","username":"xk","email":"564293991@qq.com","commits":2,"url":"https://github.com/xk"}]},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"frontEnd/vue.md","excerpt":"<h2>vue 实现了变量与模型的双向绑定</h2>\\n<p>减少 dom 操作（虚拟 dom），提高渲染效率，双向数据绑定</p>\\n<h2>特点及优势</h2>\\n<ul>\\n<li>利用虚拟 DOM 渲染</li>\\n<li>轻量级</li>\\n<li>响应式组件</li>\\n<li>支持服务器渲染</li>\\n<li>易于集成路由工具，打包工具以及状态管理工具</li>\\n</ul>\\n<h2>条件判断</h2>\\n<p>v-if ：变量值为 true/false，支持表达式 大于小于等于，如果为 false，直接没有这条数据<br>\\nv-show ：变量值为 true/false，支持表达式 大于小于等于，如果为 false，实际是隐藏数据<br>\\n反复使用 用 v-show，减少渲染性能更好，只使用一次 用 v-if</p>","autoDesc":true}')}}]);