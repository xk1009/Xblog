"use strict";(self.webpackChunkx_blog=self.webpackChunkx_blog||[]).push([[541],{4930:(l,i,a)=>{a.r(i),a.d(i,{comp:()=>c,data:()=>b});var e=a(641);const t=a.p+"assets/img/cloudAlibaba01.d22c08de.png",n=a.p+"assets/img/cloudAlibaba02.365322b2.jpg",r=a.p+"assets/img/cloudAlibaba03.0d3a9ab6.jpg",o=a.p+"assets/img/cloudAlibaba04.463d5038.jpg",p=a.p+"assets/img/cloudAlibaba05.a41031fa.jpg",s={},c=(0,a(6262).A)(s,[["render",function(l,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<h2 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos"><span>nacos</span></a></h2><p>nacos组件 用于服务注册与发现，配置管理，服务消息总线<br> nacos支持负载均衡 ribbon的restTemplate<br> nacos可切换 cp 和 ap 模式切换<br> post请求进行切换<br> nacos集群 与 持久化<br> deby数据库自带的</p><h2 id="sentinel-服务的监控与限流-降级-熔断" tabindex="-1"><a class="header-anchor" href="#sentinel-服务的监控与限流-降级-熔断"><span>sentinel 服务的监控与限流，降级，熔断</span></a></h2><p>流控规则</p><ul><li>线程数 请求进来只有设置的线程数工作，当满足不了时 报错</li><li>资源名：唯一名称，默认请求路径</li><li>针对来源：sentinel可以针对服务调用者进行限流，填写微服务名称，默认default（不区分来源）</li><li>阈值类型/单机阈值： <ul><li>QPS（每秒请求数量）：当调用该api的QPS达到阈值时进行限流</li><li>线程数：当调用该api的线程数达到阈值时限流</li></ul></li><li>是否集群：不需要集群</li><li>流控模式： <ul><li>直接：api达到限流条件时，直接限流</li><li>关联：当关联的资源达到阈值时，就限流自己</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api级别的针对来源】</li></ul></li><li>流控效果： <ul><li>快速失败：直接失败，抛出异常</li><li>warm up：根据codefactor （冷加载因子，默认3）的值，从阈值除以codefactor，经过预热时长，才达到设置的QPS阈值</li><li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须时QPS，否则无效</li></ul></li></ul><p>降级规则</p><ul><li>TR（平均响应时间，秒级）： <ul><li>平均响应时间 超出阈值 且 在时间窗口内通过的请求&gt;=5，两个条件同时满足时触发降级</li><li>窗口期过后关闭断路器</li><li>RT最大4900（更大的值 需要通过 -Dcsp.sentinel.startistic.max.rt=XXX才能生效）</li></ul></li><li>异常比例（秒级）： <ul><li>QPS&gt;=5 且异常比例（秒级统计）超过阈值，触发降级；窗口期过，关闭降级</li></ul></li><li>异常数（分钟级）： <ul><li>异常数，分钟级统计超过阈值触发降级，窗口期过，关闭降级</li></ul></li></ul><p>热点规则</p><ul><li>结合 @SentinelResource使用 配置 blockhandler 指定方法</li><li>@SentinelResource注解使用</li><li>blockHandler适用于违反规则的 返回方法</li><li>fallback适用于运行时异常的 返回方法</li><li>规则在每次重启微服务时会消失，需要配置存进nacos中，这样就不用每次重启服务配置规则了</li></ul><p>规则返回方法必须携带BlockException 这个异常类<br> 运行异常返回方法必须携带throwable 这个异常类</p><h2 id="seata-分布式事务的解决方案" tabindex="-1"><a class="header-anchor" href="#seata-分布式事务的解决方案"><span>seata 分布式事务的解决方案</span></a></h2><p><a href="https://seata.apache.org/zh-cn/" target="_blank" rel="noopener noreferrer">官网</a>很详细的文档<br> 一加三 组件模型<br> 全局唯一的事务ID<br> 三组件</p><ul><li>TC - 事务协调者 <ul><li>维护全局和分支事务的状态，驱动全局事务提交或回滚。</li></ul></li><li>TM - 事务管理器 <ul><li>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li></ul></li><li>RM - 资源管理器 <ul><li>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。<br> 流程：</li></ul></li></ul><ol><li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID</li><li>XID 在微服务调用链路上下文中传播</li><li>RM 向 TC 注册分支事务，将其纳入 XID 对应的全局事务的管辖</li><li>TM 向 TC 发起针对 XID 的全局提交或者回滚决议</li><li>TC 调度 XID 下管辖的全部分支事务完成提交或者回滚请求<br><img src="'+t+'" alt="流程" loading="lazy"><br> 配置：<br> 下载解压后，<br> file.config文件修改<br> 组名默认default XXX_tx_group<br> 修改存储方式为db<br> 修改db连接地址及账户密码<br> register.config 文件选择注册中心<br> 注意：seata1.0.0暂不支持mysql8，需要修改驱动，<a href="https://www.pianshen.com/article/5424990143/" target="_blank" rel="noopener noreferrer">https://www.pianshen.com/article/5424990143/</a></li></ol><h3 id="默认采用at模式" tabindex="-1"><a class="header-anchor" href="#默认采用at模式"><span>默认采用AT模式</span></a></h3><p>一阶段加载，二阶段提交，二阶段回滚<br> 一阶段：<br><img src="'+n+'" alt="一阶段" loading="lazy"><br> 二阶段顺利提交：<br><img src="'+r+'" alt="二阶段" loading="lazy"><br> 二阶段失败回滚：<br><img src="'+o+'" alt="二阶段" loading="lazy"><br><img src="'+p+'" alt="二阶段" loading="lazy"></p>',16)]))}]]),b=JSON.parse('{"path":"/programming/framework/springCloudAlibaba.html","title":"springCloudAlibaba","lang":"zh-CN","frontmatter":{"icon":"tree","category":["java","foundation","springCloudAlibaba"],"tag":["java","foundation","笔记","记录","springCloudAlibaba"],"title":"springCloudAlibaba","star":true,"pageview":true,"description":"nacos nacos组件 用于服务注册与发现，配置管理，服务消息总线 nacos支持负载均衡 ribbon的restTemplate nacos可切换 cp 和 ap 模式切换 post请求进行切换 nacos集群 与 持久化 deby数据库自带的 sentinel 服务的监控与限流，降级，熔断 流控规则 线程数 请求进来只有设置的线程数工作，当满足...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"springCloudAlibaba\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T07:00:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XK\\",\\"url\\":\\"https://xk1009.github.io/Xblog\\",\\"email\\":\\"564293991@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Xblog/programming/framework/springCloudAlibaba.html"}],["meta",{"property":"og:site_name","content":"树下打盹儿"}],["meta",{"property":"og:title","content":"springCloudAlibaba"}],["meta",{"property":"og:description","content":"nacos nacos组件 用于服务注册与发现，配置管理，服务消息总线 nacos支持负载均衡 ribbon的restTemplate nacos可切换 cp 和 ap 模式切换 post请求进行切换 nacos集群 与 持久化 deby数据库自带的 sentinel 服务的监控与限流，降级，熔断 流控规则 线程数 请求进来只有设置的线程数工作，当满足..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T07:00:52.000Z"}],["meta",{"property":"article:tag","content":"springCloudAlibaba"}],["meta",{"property":"article:tag","content":"记录"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"foundation"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2025-07-14T07:00:52.000Z"}]]},"git":{"createdTime":1752476452000,"updatedTime":1752476452000,"contributors":[{"name":"xk","username":"xk","email":"564293991@qq.com","commits":1,"url":"https://github.com/xk"}]},"readingTime":{"minutes":3.5,"words":1049},"filePathRelative":"programming/framework/springCloudAlibaba.md","excerpt":"<h2>nacos</h2>\\n<p>nacos组件 用于服务注册与发现，配置管理，服务消息总线<br>\\nnacos支持负载均衡  ribbon的restTemplate<br>\\nnacos可切换 cp 和 ap 模式切换<br>\\npost请求进行切换<br>\\nnacos集群 与 持久化<br>\\ndeby数据库自带的</p>\\n<h2>sentinel 服务的监控与限流，降级，熔断</h2>\\n<p>流控规则</p>\\n<ul>\\n<li>线程数 请求进来只有设置的线程数工作，当满足不了时 报错</li>\\n<li>资源名：唯一名称，默认请求路径</li>\\n<li>针对来源：sentinel可以针对服务调用者进行限流，填写微服务名称，默认default（不区分来源）</li>\\n<li>阈值类型/单机阈值：\\n<ul>\\n<li>QPS（每秒请求数量）：当调用该api的QPS达到阈值时进行限流</li>\\n<li>线程数：当调用该api的线程数达到阈值时限流</li>\\n</ul>\\n</li>\\n<li>是否集群：不需要集群</li>\\n<li>流控模式：\\n<ul>\\n<li>直接：api达到限流条件时，直接限流</li>\\n<li>关联：当关联的资源达到阈值时，就限流自己</li>\\n<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api级别的针对来源】</li>\\n</ul>\\n</li>\\n<li>流控效果：\\n<ul>\\n<li>快速失败：直接失败，抛出异常</li>\\n<li>warm up：根据codefactor （冷加载因子，默认3）的值，从阈值除以codefactor，经过预热时长，才达到设置的QPS阈值</li>\\n<li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须时QPS，否则无效</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},6262:(l,i)=>{i.A=(l,i)=>{const a=l.__vccOpts||l;for(const[l,e]of i)a[l]=e;return a}}}]);