"use strict";(self.webpackChunkx_blog=self.webpackChunkx_blog||[]).push([[4082],{4106:(i,a,e)=>{e.r(a),e.d(a,{comp:()=>n,data:()=>l});var t=e(641);const r={},n=(0,e(6262).A)(r,[["render",function(i,a){return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Q3)(' <VidStack src="https://vp-demo.u2sb.com/video/caminandes_03_llamigos_720p.mp4" /> '),a[0]||(a[0]=(0,t.Fv)('<h2 id="activit-流程" tabindex="-1"><a class="header-anchor" href="#activit-流程"><span>activit 流程</span></a></h2><p>解决更新业务流程，不需要更新源代码，通过更新流程定义图来实现流程更新<br> 流程图就是一个xml文件，解析xml，获取每个节点信息<br> BPMN流程定义图</p><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><ol><li>整合activiti</li><li>实现业务流程建模，使用BPMN实现业务流程图</li><li>部署流程到activiti</li><li>启动流程实例</li><li>查询待办任务</li><li>处理代办任务</li><li>接收流程</li></ol><h2 id="activiti-cfg-xml-工作流配置文件" tabindex="-1"><a class="header-anchor" href="#activiti-cfg-xml-工作流配置文件"><span>activiti.cfg.xml 工作流配置文件</span></a></h2><ul><li>配置数据源</li><li>配置流程引擎类 使用 单独启动的方式 StandaloneProcessEngineConfiguration</li><li>processEngine（核心）通过其可以获取各种服务 例如 runTimeService 。。</li></ul><h2 id="重点数据表" tabindex="-1"><a class="header-anchor" href="#重点数据表"><span>重点数据表</span></a></h2><ul><li>hi_ 历史数据表 每步操作都会记录</li><li>ru_运行时数据表 流程每步流程数据</li><li>re_仓库数据表 流程定义</li></ul><h2 id="重点service" tabindex="-1"><a class="header-anchor" href="#重点service"><span>重点service</span></a></h2><p>repositoryService 仓库服务，用于部署流程<br> runTimeService 运行时服务，开启流程，提交<br> taskService 任务服务，查询当期 代办任务 完成任务<br> historyService 历史服务,查询流程信息</p><h2 id="删除流程定义-repositoryservice" tabindex="-1"><a class="header-anchor" href="#删除流程定义-repositoryservice"><span>删除流程定义 repositoryService</span></a></h2><ul><li>注意：</li><li>当正在执行的流程 没有完全结束 如果要删除流程部署 会删除失败</li><li>deleteDeployment（id，true） 级联删除 就会没有删除没有完成的流程 再删除流程部署</li></ul><h2 id="将流程定义资源存入指定目录-目的是用户方便查看流程图" tabindex="-1"><a class="header-anchor" href="#将流程定义资源存入指定目录-目的是用户方便查看流程图"><span>将流程定义资源存入指定目录 目的是用户方便查看流程图</span></a></h2><ul><li>部署流程时将 bpmn文件 和 png文件 存了byte数据到act_ge_bytearray中</li><li>获取数据流 getResourceAsStream方法 参数1 为流程部署id 参数2 为数据资源名称 也就是bpmn文 件名称和png文件名称</li><li>getDiagramResourceName 获取png文件名字</li><li>getResourceName 获取pbmn文件名字<br> 使用输出流将流数据写入指定文件位置</li></ul><h2 id="流程定义-和-流程实例" tabindex="-1"><a class="header-anchor" href="#流程定义-和-流程实例"><span>流程定义 和 流程实例</span></a></h2><ul><li>businessKey 通过业务主键，activiti与项目结合</li><li>在 ru_execution表中 businessKey字段</li><li>在启动一个流程实例的时候 通过runtimeService.startProcessInstanceByKey(param1,param2)<br> param1 部署时唯一的key，param2 businessKey</li></ul><h2 id="流程定义-挂起与激活" tabindex="-1"><a class="header-anchor" href="#流程定义-挂起与激活"><span>流程定义 挂起与激活</span></a></h2><ul><li>如果将流程定义挂起 未完成的流程都挂起，流程也不能继续走下去，此流程定义也不再使用</li><li>isSuspended 判断是否挂起</li><li>repositoryService.activateProcessDefinitionById 激活方法</li><li>repositoryService.suspendProcessDefinitionById 挂起方法</li></ul><h2 id="流程实例-挂起与激活" tabindex="-1"><a class="header-anchor" href="#流程实例-挂起与激活"><span>流程实例 挂起与激活</span></a></h2><p>挂起某一个流程实例，或激活某一个流程<br> 方法同上</p><h2 id="任务分配的方式" tabindex="-1"><a class="header-anchor" href="#任务分配的方式"><span>任务分配的方式</span></a></h2><p>（根据业务情况来定，一般使用第二种方式）</p><ol><li>可直接在绘制流程图BPMN是直接写死</li><li>UEL表达式（Unified Expression Language）<br> ${assignee} 由程序中来指定<br> 在启动流程时 设置参数<br> startProcessInstanceByKey 设置map参数 map.put(&quot;assignee&quot;,&quot;zhangsa&quot;) ...<br> map中的key与el表达式中的值一致</li><li>绑定监听器 需要实现taskListener类 在配置到监听器中</li></ol><h2 id="流程变量" tabindex="-1"><a class="header-anchor" href="#流程变量"><span>流程变量</span></a></h2><p>activiti流程变量是为了流程执行需要而设置的<br> （即流程中需要使用的，业务中使用的一般不设置到流程变量中）<br> 数据类型和java大致相同，对象需要序列化</p><h3 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域"><span>变量作用域</span></a></h3><p>global 全局变量<br> local 节点变量<br> 在连线上使用UEL表达式</p><h3 id="设置global流程变量" tabindex="-1"><a class="header-anchor" href="#设置global流程变量"><span>设置global流程变量</span></a></h3><ol><li>启动的时候设置 startProcessInstanceByKey 方法</li><li>任务办理时设置 complete 方法</li><li>通过当前流程实例设置 runtimeService 运行时服务来设置</li><li>通过当前任务设置 taskService 任务服务来设置</li></ol><h3 id="设置local流程变量" tabindex="-1"><a class="header-anchor" href="#设置local流程变量"><span>设置local流程变量</span></a></h3><p>通过当前任务设置 只有当前任务节点有效</p><h2 id="任务组与候选人" tabindex="-1"><a class="header-anchor" href="#任务组与候选人"><span>任务组与候选人</span></a></h2><p>可以在bpmn中写死，用逗号隔开；也可以用UEL表达式</p><h3 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1"><span>步骤：</span></a></h3><ol><li>先查询组任务 taskCandidate设置候选人 来查询任务</li><li>领取任务为个人任务 claim方法来领取任务<br> 有可能领取任务后又想返回给其他候选人组 设置办理人设置为null setAssingee 方法<br> 也可以委托给其他人 这两种情况要先判断本人是否是候选人 setAssingee 方法</li><li>查询个人任务</li><li>办理任务</li></ol><h2 id="网关和排他网关" tabindex="-1"><a class="header-anchor" href="#网关和排他网关"><span>网关和排他网关</span></a></h2><p>（防止条件都成立从而两个分支都走）如果都满足，只走一个流程，如果都不满足就会报错<br> 在condition中设置参数条件</p><h2 id="并行网关" tabindex="-1"><a class="header-anchor" href="#并行网关"><span>并行网关</span></a></h2><p>它具有分支和汇聚的功能，并行网关不会解析条件</p><h2 id="包含网关" tabindex="-1"><a class="header-anchor" href="#包含网关"><span>包含网关</span></a></h2><p>是以上两个的结合 满足条件可以并行执行，执行完成到汇聚点，<br> 所有满足条件都执行完聚合之后才到下一个节点</p><h2 id="activiti与spring整合" tabindex="-1"><a class="header-anchor" href="#activiti与spring整合"><span>activiti与spring整合</span></a></h2><ol><li>pom 依赖导入</li><li>配置文件 ProcessConfigurer</li></ol><h3 id="数据源配置" tabindex="-1"><a class="header-anchor" href="#数据源配置"><span>数据源配置</span></a></h3><p>配置工程类获取processEngine<br> 配置service获取注入spring其中</p><h2 id="注" tabindex="-1"><a class="header-anchor" href="#注"><span>注：</span></a></h2><p>activiti7 强依赖springSecurity<br> activiti7中新增 ProcessRuntime类和TaskRuntime类<br> 但需要整合springSecurity</p>',47))])}]]),l=JSON.parse('{"path":"/java/Activite.html","title":"Activit","lang":"zh-CN","frontmatter":{"icon":"chart-line","date":"2019-11-22T00:00:00.000Z","category":["java","activit"],"tag":["java","activit","笔记","记录"],"title":"Activit","star":true,"pageview":true,"description":"activit 流程 解决更新业务流程，不需要更新源代码，通过更新流程定义图来实现流程更新 流程图就是一个xml文件，解析xml，获取每个节点信息 BPMN流程定义图 步骤 整合activiti 实现业务流程建模，使用BPMN实现业务流程图 部署流程到activiti 启动流程实例 查询待办任务 处理代办任务 接收流程 activiti.cfg.xml...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Activit\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-23T08:43:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XK\\",\\"url\\":\\"https://xk1009.github.io/Xblog\\",\\"email\\":\\"564293991@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Xblog/java/Activite.html"}],["meta",{"property":"og:site_name","content":"树下打盹儿"}],["meta",{"property":"og:title","content":"Activit"}],["meta",{"property":"og:description","content":"activit 流程 解决更新业务流程，不需要更新源代码，通过更新流程定义图来实现流程更新 流程图就是一个xml文件，解析xml，获取每个节点信息 BPMN流程定义图 步骤 整合activiti 实现业务流程建模，使用BPMN实现业务流程图 部署流程到activiti 启动流程实例 查询待办任务 处理代办任务 接收流程 activiti.cfg.xml..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T08:43:21.000Z"}],["meta",{"property":"article:tag","content":"记录"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"activit"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2019-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T08:43:21.000Z"}]]},"git":{"createdTime":1750339044000,"updatedTime":1750668201000,"contributors":[{"name":"xk","username":"xk","email":"564293991@qq.com","commits":2,"url":"https://github.com/xk"}]},"readingTime":{"minutes":4.15,"words":1245},"filePathRelative":"java/Activite.md","excerpt":"\x3c!-- <VidStack src=\\"https://vp-demo.u2sb.com/video/caminandes_03_llamigos_720p.mp4\\" /> --\x3e\\n<h2>activit 流程</h2>\\n<p>解决更新业务流程，不需要更新源代码，通过更新流程定义图来实现流程更新<br>\\n流程图就是一个xml文件，解析xml，获取每个节点信息<br>\\nBPMN流程定义图</p>\\n<h2>步骤</h2>\\n<ol>\\n<li>整合activiti</li>\\n<li>实现业务流程建模，使用BPMN实现业务流程图</li>\\n<li>部署流程到activiti</li>\\n<li>启动流程实例</li>\\n<li>查询待办任务</li>\\n<li>处理代办任务</li>\\n<li>接收流程</li>\\n</ol>","autoDesc":true}')},6262:(i,a)=>{a.A=(i,a)=>{const e=i.__vccOpts||i;for(const[i,t]of a)e[i]=t;return e}}}]);